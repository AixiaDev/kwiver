# ================================================================
config dirs
   # path to image list file
   :dnd /.../kwiver/source/sprokit/pipelines/examples/darknet_detector/

   # path to darknet
   :dns /.../darknet/source/

# ================================================================
process input
  :: frame_list_input

  # build full file name for image list file.
  :image_list_file{CONF} dirs:dnd
  :image_list_file[append]   image_list.txt

  # The path configuration item specifies a list of directories to
  # searh for the image files. These file names come from the
  # image_file_list config item above.
  :path{CONF} dirs:dns
  :path[append] data

  :frame_time          .03333
  :image_reader:type   ocv

# ================================================================
process detector
  :: image_object_detector
  :detector:type    darknet_detector

  # network config file
  :detector:darknet_detector:net_config{CONF} dirs:dns
  :detector:darknet_detector:net_config[append]  cfg/yolo.cfg

  # weights file
  :detector:darknet_detector:weight_file{CONF} dirs:dns
  :detector:darknet_detector:weight_file[append] yolo.weights

  # class names file
  :detector:darknet_detector:class_names{CONF} dirs:dns
  :detector:darknet_detector:class_names[append]  data/coco.names

  # parameters for the darkent detector
  :detector:darknet_detector:thresh  0.45
  :detector:darknet_detector:hier_thresh  0.001
  :detector:darknet_detector:gpu_index  0

connect from input.image
        to   detector.image

# ================================================================
process draw
  :: draw_detected_object_boxes
  :default_line_thickness 3

connect from detector.detected_object_set
        to   draw.detected_object_set
connect from input.image
        to draw.image

# ================================================================
process disp
  :: image_viewer
  :annotate_image         true
  # pause_time in seconds. 0 means wait for keystroke.
  :pause_time             1
  :title                  images
#  :footer                 images
#  :header                 header-header

connect from input.timestamp
        to   disp.timestamp
connect from draw.image
        to   disp.image

# ================================================================
process write
   :: image_writer
   :image_writer:type ocv

connect from draw.image
        to   write.image

# -- end of file --
