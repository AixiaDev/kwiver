/**
 * \page pipline_declaration Pipeline declaration files
 *
 * Pipeline declaration files allow a pipeline to be loaded from a plain text
 * file. They provide all of the information necessary to run a pipeline and may
 * be included from other pipeline files.
 *
 * Lines starting with '#' character are considered comments.
 *
 * \par Common rules
 *
 * <pre>
 *   <upper>          ::= "A" .. "Z"
 *   <lower>          ::= "a" .. "z"
 *   <digit>          ::= "0" .. "9"
 *   <graph>          ::= any printable character
 *   <space>          ::= " "
 *   <tab>            ::= "\t"
 *   <alpha>          ::= <upper> | <lower>
 *   <alnum>          ::= <upper> | <lower> | <digit>
 *   <blank>          ::= <space> | <tab>
 *   <opt-whitespace> ::= <blank> <opt-whitespace> | ""
 *   <whitespace>     ::= <blank> <opt-whitespace>
 *   <eol>            ::= "\r\n" | "\n"
 *   <line-end>       ::= <eol> <line-end> | <eol>
 * </pre>
 *
 * \section include Includes
 *
 * \par Specification
 *
 * <pre>
 *   <path>              ::= platform-specific
 *   <include-directive> ::= "!include"
 *   <include-spec>      ::= <opt-whitespace> <include-directive> <whitespace> <path>
 * </pre>
 *
 * \par Examples
 *
 * \todo Add some examples.
 *
 * <pre>
 * </pre>
 *
 * \section configuration Configuration
 *
 * Configurations are statements which add an entry to the configuration block
 * for the pipeline. Subblocks can be defined by using the <tt>:</tt> (colon) character to
 * separate key components. The key name is the index to be set within the
 * configuration. Key path components may be composed of alphanumeric characters
 * as well as the <tt>-</tt> and <tt>_</tt> characters. Values may also have
 * flags set as well as be filled in by providers.
 *
 * Configuration items can have their values replaced or modified by subsequent
 * configuration statements, unless the read-only flag is specified (see below).
 *
 *
 * \subsection configuration_flags Configuration flags
 *
 * Configuration keys may have flags set on them. Currently the only understood
 * flags are:
 *
 * \cflag{ro} Marks the configuration value as read-only.
 * \cflag{append} Appends to the configuration key.
 * \cflag{append=comma} Appends to the configuration key, prefixing a comma if the value is non-empty.
 * \cflag{append=space} Appends to the configuration key, prefixing with a space if the value is non-empty.
 * \cflag{append=path} Appends to the configuration key as if it is a directory name.
 *
 * \par Specification
 *
 * <pre>
 *   <flag-start>     ::= "["
 *   <flag-separator> ::= ","
 *   <flag-end>       ::= "]"
 *   <key-flag-char>  ::= <alnum> | "-" | "_" | "="
 *   <key-flag>       ::= <key-flag-char> <key-flag> | <key-flag-char>
 *   <key-flags>      ::= <key-flag> <flag-separator> <key-flag> | <key-flag>
 *   <key-flags-decl> ::= <flag-start> <key-flags> <flag-close>
 * </pre>
 *
 * \par Examples
 *
 * \todo Add some more examples.
 *
 * foo[ro] bar
 * foo[append] 1234
 * - results in foo = "bar1234"
 *
 * <pre>
 * </pre>
 *
 * \subsection configuration_provider Configuration provider
 *
 * Configuration values may be fetched from another source by means of a
 * provider. This allows for context-aware configuration files.
 *
 * \par Specification
 *
 * Configuration keys may also be fetched from providers. When using a provider,
 * the value is passed as an argument to the provider which then replaces the
 * value. The currently supported providers include:
 *
 * \cprov{CONF} Replaces the value with another value. The argument for this
 *              provider is the full path of the key to look up.
 * \cprov{SYS} Fetches information from the system. The arguments are not
 *             defined yet.
 * \cprov{ENV} Fetches values from the environment. The argument is the
 *             environment variable to use.
 *
 * <pre>
 *   <provider-start>    ::= "{"
 *   <provider-end>      ::= "}"
 *   <key-provider>      ::= <upper> <key-provider> | <upper>
 *   <key-provider-spec> ::= <provider-start> <key-provider> <provider-end>
 *   <key-options>       ::= <key-flag-decl> | <key-provider-spec> | <key-flag-decl> <key-provider-spec> | ""
 * </pre>
 *
 * \par Examples
 *
 * <pre>
 * :gsd{CONF} common:gsd
 * :delay[ro]{ENV} TEST_ENV
 * </pre>
 *
 * \subsection configuration_value Configuration value
 *
 * \par Specification
 *
 * <pre>
 *   <separator>     ::= ":"
 *   <decl-char>     ::= <alnum> | "-" | "_"
 *   <symbol-char>   ::= <decl-char> | "/"
 *   <decl-name>     ::= <decl-char> <decl-name>
 *   <key-component> ::= <symbol-char> <key-component>
 *   <key-path>      ::= <key-component> <separator> <key-path> | <key-component>
 *   <full-key-path> ::= <key-path> <key-options>
 *   <value-char>    ::= <graph> | <blank>
 *   <key-value>     ::= <value-char> <key-value> | <value-char>
 *   <config-spec>   ::= <full-key-path> <whitespace> <key-value>
 * </pre>
 *
 * \par Examples
 *
 * \todo Add some examples.
 *
 * <pre>
 * </pre>
 *
 * \subsection configuration_partial Partial configuration declarations
 *
 * Configuration lines can also be abbreviated. They are used within other
 * blocks to help abbreviate configuration specifications.
 *
 * \par Specification
 *
 * <pre>
 *   <partial-config-spec> ::= <opt-whitespace> <separator> <config-spec> <line-end>
 *   <partial-configs>     ::= <partial-config-spec> <partial-config> | <partial-config-spec>
 * </pre>
 *
 * \par Examples
 *
 * \todo Add some examples.
 *
 * <pre>
 * </pre>
 *
 * \subsection configuration_block Configuration block
 *
 * Configuration blocks make it easy to assign many configuration indices at
 * without repeating a common path.
 *
 * \par Specification
 *
 * <pre>
 *   <config-block-spec> ::= <opt-whitespace> "config" <whitespace> <key-path> <line-end>
 *                           <partial-configs>
 * </pre>
 *
 * \par Examples
 *
 * \todo Explain examples.
 *
 * <pre>
 *   config common
 *     :uncommon  value
 *     :also:uncommon  value
 * </pre>
 * Creates configuration items:
 * <pre>
 *     common:uncommon value
 *     common:also:uncommon value
 * </pre>
 *
 * Another example:
 * <pre>
 *   config a:common:path
 *     :uncommon:path:to:key value
 *     :other:uncommon:path:to:key value
 * </pre>
 * Creates configuration items:
 * <pre>
 *     a:common:path:uncommon:path:to:key value
 *     a:common:path:other:uncommon:path:to:key value
 *
 * </pre>
 *
 * \subsection process_block Process block
 *
 * A process block adds a process to the pipeline with
 * optional configuration items.
 *
 * \par Specification
 *
 * <pre>
 *   <type-token>         ::= "::"
 *   <type-decl>          ::= <type-token> <whitespace> <decl-component>
 *   <process-block-spec> ::= <opt-whitespace> "process" <whitespace> <decl-component> <line-end>
 *                            <opt-whitespace> <type-decl> <line-end>
 *                            <partial-configs>
 * </pre>
 *
 * \par Examples
 *
 * \todo Explain examples.
 *
 * <pre>
 *   process my_process
 *     :: my_process_type
 * </pre>
 * <pre>
 *   process another_process
 *     :: awesome_process
 *        :some_param     some_value
 * </pre>
 *
 * When a port is declared as static, the value at this port may also be
 * supplied via the configuration. This is done by using the special static
 * before the port name. The syntax for specifying static values is
 *
 * <pre>
 *  :static/<port-name> <key-value>
 * </pre>
 *
 * If a port is connected and also has a static value configured, the configured value is ignored.
 *
 * The following is an example of configuring a static port value.
 *
 * <pre>
 *   process my_process
 *     :: my_process_type
 *        :static/port     value
 * </pre>
 *
 *
 * \subsection connect_block Connect block
 *
 * A connection block declares that two ports will be connected.
 *
 * \par Specification
 *
 * <pre>
 *   <port-component>      ::= <symbol-char> <port-component>
 *   <port-process>        ::= <key-component>
 *   <port-addr-separator> ::= "."
 *   <port-name>           ::= <port-component>
 *   <port-addr>           ::= <port-process> <port-addr-separator> <port-name>
 *   <connect-block-spec>  ::= <opt-whitespace> "connect" <whitespace> "from" <whitespace> <port-addr> <line-end>
 *                             <opt-whitespace> "to" <port-addr> <line-end>
 * </pre>
 *
 * \par Examples
 *
 * \todo Add some examples.
 *
 * <pre>
 * connect from input.timestamp
 *         to   stabilize.timestamp
 *
 * connect from input.timestamp
 *         to   writer.timestamp
 * </pre>
 *
 * \subsection cluster_block Cluster block
 *
 * A cluster is a collection of processes which can be treated as a single
 * process for connection and configuration purposes. They may be loaded from
 * files and loaded as a single process. Note the start of a cluster declaration
 * is similar to a comment.
 *
 * \par Specification
 *
 * <pre>
 *   <description-decl>         ::= ":#" <whitespace> <key-value>
 *   <input-map-decl>           ::= "imap"
 *   <output-map-decl>          ::= "omap"
 *   <cluster-config-spec>      ::= <opt-whitespace> <description-decl> <line-end>
 *                                  <partial-config-spec>
 *   <opt-cluster-input-target> ::= <cluster-input-target> | ""
 *   <cluster-input-target>     ::= <opt-whitespace> "to" <port-addr> <line-end> <opt-cluster-input-target>
 *   <cluster-input-spec>       ::= <opt-whitespace> <description-decl> <line-end>
 *                                  <opt-whitespace> <input-map-decl> <whitespace> "from" <whitespace> <port-name> <line-end>
 *                                  <cluster-input-target>
 *   <cluster-output-spec>      ::= <opt-whitespace> <description-decl> <line-end>
 *                                  <opt-whitespace> <output-map-decl> <whitespace> "from" <whitespace> <port-addr> <line-end>
 *                                  <opt-whitespace> "to" <port-name> <line-end>
 *   <cluster-decl>             ::= <cluster-config-spec> | <input-mapping-spec> | <output-mapping-spec>
 *   <cluster-decls>            ::= <cluster-decl> <cluster-decls> | ""
 *   <cluster-block-spec>       ::= <opt-whitespace> "cluster" <whitespace> <decl-component> <line-end>
 *                                  <opt-whitespace> <description-decl> <line-end>
 *                                  <cluster-decls>
 * </pre>
 *
 * \par Examples
 *
 * \todo Add some examples.
 *
 * <pre>
 * </pre>
 *
 * \subsection edge_config Edge Configuration
 *
 * Pipeline edges are configured in a hierarchical manner. First there is
 * the _pipeline:_edge config block which establishes the basic
 * configuration for all edges. This can be specified as follows:
 *
 * <pre>
 * config _pipeline:_edge
 *        :capacity 30
 * </pre>
 *
 * Currently the only attribute that can be configured is "capacity".
 *
 * The config for the edge type overrides the default configuration so
 * that edges used to transport specific data types can be configured as
 * a group. This edge type configuration is specified as follows:
 *
 * <pre>
 * config _pipeline:_edge_by_type
 *        :image_container:capacity 30
 *        :timestamp:capacity 4
 * </pre>
 *
 * Where \b image_container and \b timestamp are the type names used when
 * defining process ports.
 *
 * After this set of configurations have been applied, edges can be
 * more specifically configured based on their connection description. An
 * edge connection is described in the config as follows:
 *
 * <pre>
 * config _pipeline:_edge_by_conn
 *         :<process>:<up_down>:<port>
 * </pre>
 *
 * Where:
 * \li <process> is the name of the process that is being connected.
 * \li <up_down> is the direction of the connection. This is either "up" or "down".
 * \li <port> is the name of the port.
 *
 * For the example, the following connection
 *
 * <pre>
 * connect from input.timestamp
 *         to   stabilize.timestamp
 * </pre>
 *
 * can be described as follows:
 *
 * <pre>
 * config _pipeline:_edge_by_conn
 *    :input:up:timestamp:capacity 20
 *    :stabilize:down:timestamp:capacity 20
 * </pre>
 *
 * Both of these entries refer to the same edge, so in real life, you
 * would only need one.
 *
 * These different methods of configuring pipeline edges are applied in a
 * hierarchial manner to allow general defaults to be set, and overridden
 * using more specific edge attributes.
 *
 *
 * \subsection scheduler_config Scheduler Configuration
 *
 * The scheduler to be used with the pipeline can be selected using a
 * special configuration section.
 *
 * <pre>
 * config _scheduler
 *    :type <scheduler-type>
 * </pre>
 *
 * Available scheduler types are:
 * - sync - Runs the pipeline synchronously in one thread.
 * - thread_per_process - Runs the pipeline using one thread per process.
 * - pythread_per_process - Runs the pipeline using one thread per process and supports processes written in python.
 * - thread_pool - Runs pipeline with a limited number of threads.
 *
 * The pythread_per_process is the only scheduler that supports processes written python.
 *
 * Scheduler specific configuration entries are in a sub-block named as the scheduler.
 * Currently these schedulers do not have any configuration parameters, but when they do,
 * they would be configured as shown in the following example.
 *
 * \par Example
 *
 * <pre>
 * config _scheduler
 *    :type thread_per_process
 *
 * # Configuration for thread_per_process scheduler
 *    :thread_per_process:foo   bar
 *
 * # Configuration for sync scheduler
 *    :sync:foos   bars
 * </pre>
 *
 */
