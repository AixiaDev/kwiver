KWIVER v1.2.0 Release Notes
===========================

This is a minor release of KWIVER that provides both new functionality and
fixes over the previous v1.1.0 release.


Updates since v1.1.0
--------------------

Vital

 * Added new data types geo_point and geo_polygon for representing points
   and polygons in geographic coordinates.  These new types use the new
   geodetic conversion function and know how to convert themselves into
   different coordinate systems.  These replace the old geo_UTM, geo_lat_lon
   and geo_corner_points types.

 * The geo_map algorithm has been replaced with a new non-algorithm mechanism
   for geodetic conversion.  The new approach uses member functions on the new
   geodetic types to request conversions in combination with a conversion
   algorithm that must be provided and registered by a suitable plugin (e.g.
   the PROJ.4 arrow).  Registration is automatic when the plugin is loaded,
   with a mechanism in place for users to register their own algorithm if
   desired.  The new API is also more general and supports arbitrary datums,
   not just WGS84.

 * Generalized the track and track_state types to be useful for both feature
   and object tracks.  Data that is specific to features or objects is now
   stored in subclasses of track_state.

 * Generalized the track_set to be useful for both feature and object tracks.
   Added derived classes for feature_track_set and object_track_set to
   indicate the type of tracks in the set and provide specialized helper
   functions.  Algorithm APIs previously using track_set now use either
   feature_track_set or object_track_set.

 * Track states now have a pointer (std::weak_ptr) back to the track object
   which contains them.  This means that each track state can belong to at
   most one track, and tracks and track states must now be created and
   referenced only via shared_ptr.  Constructors for track are now protected
   and "make()" static member is used for construction.  A "clone()" function
   is now used for track copy construction.

 * Array descriptors are now iterable (have begin/end methods), allowing them
   to be used in standard algorithms, range-based for, etc.

 * Detected object classifications (detected_object_type) are now iterable
   (have begin/end methods), allowing them to be used in standard algorithms,
   range-based for, etc.  This provides a much more efficient mechanism for
   visiting all classifications.

 * Improved plugin explorer so it is easier to get information ahout
   processes and algorithms. Typicl usage for locating processes would
   be to enter the following command to find which processes have to
   do with reading.

   $ plugin_explorer --proc read

   Then enter the following command when the specific process has been
   identified to get a detailed output about the process.

   $ plugin_explorer --proc image_file_reader -d

 * Added macros to access low level datum objects using port traits.

Vital Bindings

 * Vital C and Python bindings have been updated with respect the refactoring
   of tracks and track_sets to account for both feature and object tracks.

Sprokit

 * Removed the CMake function sprokit_add_plugin and replaced it with the more
   general kwiver_add_plugin function that is used elsewhere in KWIVER.


Fixes since v1.1.0
------------------
