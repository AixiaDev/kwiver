This file describes the proposed new grammar for sprokit pipeline description files.

kw_* refer to key words
tk_* are tokens
CAPS  refer top non-terminals

-- reserved words --
kw_process
kw_config
kw_connect
kw_block
kw_block_end
kw_cluster
kw_include

TK_KW_ as above
TK_ASSIGN '='
TK_LOCAL_ASSIGN ':='
TK_COLON  ':'
TK_WORD "^[a-zA-Z-_][-a-zA-Z0-9.:/_]+[-a-zA-Z0-9./_]"



Lexer must handle include directives in vital format. "include" <filename>
Do token expanding on include file name. Token expansion does not include config references.


-- Grammar --

BLOCK ::= BLOCK     PROCESS-DEF
      | BLOCK       CONFIG
      | BLOCK       CONNECT
      | CLUSTER-DEF  // goes to end of input
      | <e>

CONFIG ::= kw_config tk_eol CONFIG-BLOCK

// May be able to use vital config parser for a config block

CONFIG-BLOCK ::= CONFIG-BLOCK  CONFIG-LINE
             | kw_block <rest-of-line> tk_eol CONFIG-BLOCK kw_block_end tk_eol { push_block ($2); }
             | <e>

// Save rest-of-line exactly as presented in the AST. Resolve any macros when converting AST to config block

CONFIG-LINE ::= OPT_KW tk_word FLAG-SPEC '=' <rest-of-line> tk_eol    { key = $2; val = $3; add flags based on $1 }
            | tk_word ':=' <rest-of-line> tk_eol  { add_local_symbol( $1, $3 ); }
            | ':' tk_word FLAGS  <rest-of-line> tk_eol  # backwards compatible form (optional)

OPT-KW ::= OPT-KW kw_relpath  // "relativepath"
       | <e>

FLAG-SPEC ::= '[' FLAGS ']'
          | <e>

FLAGS ::= ONE_FLAG
      | FLAGS ',' ONE_FLAG

// lex these into words and then have parse the strings
ONE_FLAG ::= 'ro'        { set RO flag }
         | 'append'      { set append }
         | 'comma'       { set append-comma }
         | 'space'
         | 'path'
         | 'tunable' // cluster only




PROCESS-DEF ::= kw_process tk_word '::' tk_word CONFIG-BLOCK   {  process_name = $2; process_type = $4; }


CONNECT ::= kw_connect kw_from tk_word '.' tk_word kw_to tk_word '.' tk_word tk_eol
             { from_proc = $3; from_port = $5; to_proc = $7; to_port = $9 }



// ---------------- Cluster productions -------------------------

// Production returns concatenated strings. Always binds with next production.
DESCRIP ::= DESCRIP '-- ' <rest-of-line> <eol>
        | <e>


CLUSTER-DEF ::= DESCRIP kw_cluster tk_word { name = $2 } CLUSTER-DECLS CLUSTER-PROCESS CLUSTER-CONNECT EOF  <- eof really?

// zero or more, in any order
CLUSTER-DECL ::= CLUSTER-CONFIG
              | IMAP
              | OMAP

CLUSTER-DECLS ::= CLUSTER-DECLS CLUSTER-DECL
              | <e>

CLUSTER-CONFIG ::= DESCRIP CLUSTER-CONFIG CONFIG-LINE
               | <e>

// Would be nicer if: ks_omap DESCRIP kw_from ... where descrip follows keyword.

OMAP ::= DESCRIP OMAP kw_omap kw_from tk_word '.' tk_word kw_to tk_word { from_proc = $3; from_port =$5; to_port = $7; }
     | <e>

IMAP ::= DESCRIP IMAP kw_imap kw_from kw_word kw_to tk_word '.' tk_word  { from_port = $3; to_proc = $5; to_port = $7; }
     | <e>

CLUSTER-PROCESS ::= CLUSTER-PROCESS PROCESS-DEF   // must contain at least one process
                | PROCESS-DEF

CLUSTER-CONNECT ::= CLUSTER-CONNECT CONNECT
                | CONNECT
                | <e>


///// old sample /////

cluster map_config_only_provided
  :# Cluster for map_config testing.  <- description of preceeding cluster
  :# A tunable parameter.             <- description following config param
  :tunable[tunable] expected
  :# The output.                      <- description for omap
  omap from expect.dummy   to   pass

  :# iportdesc descrip binds forward
  imap from iport
       to   myproc.iport

  :# The output. descrip binds forward
  omap from expect.dummy
       to   pass

// The following config assignment must be delayed until cluster tunable is assigned a value

process expect :: expect
  :tunable[ro] map_config_only_provided:tunable  <- <cluster-name>:<config-key>
  :expect[ro] map_config_only_provided:tunable

process sink_expect
  :: sink

connect from expect.dummy
        to   sink_expect.sink


// ------------------------------------------------------------------
// ---- new format -------

--Cluster for map_config testing.  <- description of preceeding cluster
cluster map_config_only_provided
  -- A tunable parameter.             <- description following config param
  -- Tunable is as tunable does
  :tunable[tunable] expected

  -- iportdesc descrip binds forward
  imap from iport
       to   myproc.iport

  -- The output. descrip binds forward
  omap from expect.dummy
       to   pass

// The following config assignment must be delayed until cluster tunable is assigned a value

process expect :: expect
  :tunable[ro] map_config_only_provided:tunable  <- <cluster-name>:<config-key>
  :expect[ro] map_config_only_provided:tunable

process sink_expect
  :: sink

connect from expect.dummy
        to   sink_expect.sink
